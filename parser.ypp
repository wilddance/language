%{
    #include<stdio.h>
    #include<stdlib.h>
    #include<string>
    #include<string.h>
    #include<vector>
    #include<stack>
    #include<stdarg.h>

    #include"../classes/Vars.cpp"
    #include"../defs.h"

    //#ifndef NO_FLEX_DEBUG printf(...) printf("")
        
    ///////////////
    // Bison/flex stuff
    ///////////////

    int yyerror(const char*);
    int yylex();
    extern int yylineno;     //i declare yylineno from the lexical analyzer
    extern char *yytext;
    extern char * yytext;

    ///////////////
    // Custom part
    ///////////////

    // Custom buffers, do not touch
    char buff[100];
    string s;
    stack<int> line_stack;

    int help = 0;

    // Helpers
    Vars v;
    Code lines;

    int line = 0;

    char* str(const char* format, ...){

        va_list vl;
        va_start(vl, format);
        
        char buff[100];

        vsprintf(buff, format, vl);
        va_end(vl);

        char* a =strdup(buff); 

        memset(buff, 0, sizeof(char) * 100);
        return a;
    }

    void nextLine(){
        s = string(buff);
        lines.push(s);
        printf("Code: %s\n", buff);
        memset(buff, 0, 100);
    }

    void nextLine(const char* ins){
        sprintf(buff, "%s", ins);
        nextLine();
    }

    void sub(){
        nextLine("SUB");
    }

    void jlz(char* line){
        sprintf(buff, "JLZ %s", line);
        nextLine();
    }

    void gotoline(char* line){
        sprintf(buff, "GOTO %s", line);
        nextLine();
    }

    void push(char* name){
        sprintf(buff, "PUSH %s", name) ;
        nextLine();
    }

    void pop(char* name){
        sprintf(buff, "POP $%s", name );
        nextLine();
    }
    
    // debug method only
    void debug(){
        lines.print();
    }
%}

%union{
    int val;
    char ch;
    char* s;
}

%token IF WHILE BEG END ELSE IFELSE
%token REL_OPER
%token END_ST
%token IDENT 
%token OPER
%token DIGITS
%token COM
%token READ
%token DEBUG
%token BOOL_VAL

%token STARTBLOCK
%token ENDBLOCK

%type<val> bool
%type<val> REL_OPER 
%type<val> exp DIGITS value
%type<ch> OPER 
%type<s> IDENT BOOL_VAL adr
%type<s> READ DEBUG
%type<ch> STARTBLOCK ENDBLOCK


%%



s:
 | s read | s value | s debug | s if | s bool | s while


PLACEHOLDER

%%

int yyerror (const char *msg) {
  printf("oha, %s: text: '%s' val: %s in line %d\n", msg, yytext, yylval, yylineno);
  return 0;
}

int main() {
        printf("Zaczynamy parsowanie\n");
		yyparse();
}
